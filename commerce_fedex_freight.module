<?php
/**
 * @file
 * Defines the FedEx Freight shipping method and services for Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_fedex_freight_menu() {
  $items = array();
  $items['admin/commerce/config/shipping/methods/fedex-freight/edit'] = array(
    'title' => 'Edit',
    'description' => 'Adjust FedEx Freight shipping settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fedex_freight_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'includes/commerce_fedex_freight.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  return $items;
}


/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_fedex_freight_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['fedex_freight'] = array(
    'title' => t('FedEx Freight'),
    'description' => t('Quote rates for FedEx Freight'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_fedex_freight_commerce_shipping_service_info() {
  $shipping_services = array();
  $available_services = commerce_fedex_freight_shipping_service_types();
  $selected_services = variable_get('commerce_fedex_freight_services', array());
  foreach ($selected_services as $id => $val) {
    if (!empty($val)) {
      $service = $available_services[$id];
      $shipping_services[drupal_strtolower($id)] = array(
        'title' => $service,
        'description' => $service,
        'display_title' => $service,
        'shipping_method' => 'fedex_freight',
        'price_component' => 'shipping',
        'callbacks' => array(
          'rate' => 'commerce_fedex_freight_service_rate_order',
        ),
      );
    }
  }
  return $shipping_services;
}

/**
 * Implements hook_commerce_shipping_service_rate_options_alter().
 */
function commerce_fedex_freight_commerce_shipping_service_rate_options_alter(&$options, $order) {
  // If the display FedEx logo next to FedEx Freight services is enabled,
  // loop through the options and add the FedEx logo to FedEx Freight services.
  if (variable_get('commerce_fedex_freight_show_logo', FALSE)) {
    $image = drupal_get_path('module', 'commerce_fedex_freight') . '/images/fedex-logo.png';
    if (file_exists($image)) {
      foreach ($options as $key => &$option) {
        if (in_array(drupal_strtoupper($key), array_keys(commerce_fedex_freight_shipping_service_types()))) {
          $option = theme('image', array('path' => $image, 'width' => '32px')) . ' ' . $option;
        }
      }
    }
  }
}

/**
 * Returns an array of shipping method rates obtained from FedEx servers.
 *
 * @param array $shipping_service
 *   The shipping service that is being requested by commerce shipping.
 * @param object $order
 *   The commerce order object for the order that we're requesting rates for.
 *
 * @return array
 *   The rate values for the requested shipping service.
 */
function commerce_fedex_freight_service_rate_order($shipping_service, $order) {
  $commerce_customer_bd_shipping = commerce_customer_profile_load($order->commerce_customer_bd_shipping[LANGUAGE_NONE][0]['profile_id']);
  $home_or_business = $commerce_customer_bd_shipping->field_home_or_business[LANGUAGE_NONE][0]['value'];
  $call_for_appointment = $commerce_customer_bd_shipping->field_call_for_appointment[LANGUAGE_NONE][0]['value'];
  $tailgate_offload = $commerce_customer_bd_shipping->field_tailgate_offload_extra[LANGUAGE_NONE][0]['value'];

  $weight = commerce_physical_order_weight($order, 'lb');

  // First attempt to recover cached shipping rates for the current order.
  $rates = commerce_shipping_rates_cache_get('fedex_freight', $order, 0);

  // The request for each FedEx service is the same because they're collected
  // all at once. If the first request failed, then they will all fail. If the
  // rates variable is not an array then continue with the request.
  if (!is_array($rates)) {
    // Include the file that handles SOAP requests.
    module_load_include('inc', 'commerce_fedex_freight', 'includes/commerce_fedex_freight_rest_client');
    // Create the rate request to submit to FedEx for collecting shipping rates.
    $response = commerce_fedex_freight_create_rate_request($order, $shipping_service);
    $name = check_plain('fedex_freight_economy');
    $currency_code = 'USD';
    if (!empty($response)) {
      // title tag exist then there is an error in the response and
      // choose amount from bluedog default settings.
      if ($response->title) {
        $amount = variable_get('bd_shipping_fedex_freight_default_value', 0);
      }
      else {
        $amount = ($response->LTLFuelSurcharge + $response->{'net-freight-charges'} + $response->charges->{'chg-amt'}) - $response->discounts->{'disc-amount'};
        $amount = $amount*variable_get('commerce_fedex_freight_factor');
      }
      if ($call_for_appointment) {
        $amount = $amount + variable_get('bd_shipping_call_for_app_charges', 0);
      }
      if ($tailgate_offload) {
        $amount = $amount + variable_get('bd_shipping_lift_gate_charges', 0);
      }
      if (!$home_or_business) {
        $amount = $amount + variable_get('bd_shipping_fedex_freight_residence', 0);
      }
      if (!empty($amount) && !empty($currency_code)) {
        // Create the shipping service array to return to commerce_shipping.
        $rates[strtolower($name)] = array(
          'amount' => commerce_currency_decimal_to_amount($amount, $currency_code),
          'currency_code' => $currency_code,
          'data' => array(),
        );
      }

    }
    if (!empty($rates)) {
      // Cache the calculated rates for subsequent requests.
      commerce_shipping_rates_cache_set('fedex_freight', $order, $rates);
    }
    else {
      // If request fails, cache an empty array to prevent multiple failed
      // requests since all additional requests will fail as well.
      commerce_shipping_rates_cache_set('fedex_freight', $order, array());
    }

  }
  // Return the rate for the requested service or FALSE if not found.
  return isset($rates[$shipping_service['name']]) ? $rates[$shipping_service['name']] : FALSE;
}

/**
 * Returns an array representing the available shipping services from FedEx.
 *
 * @return array
 *   The keyed values of available shipping services.
 */
function commerce_fedex_freight_shipping_service_types() {
  return array(
    'FEDEX_FREIGHT_ECONOMY' => t('FedEx Freight Economy'),
    'FEDEX_FREIGHT_PRIORITY' => t('FedEx Freight Priority'),
  );
}

/**
 * Returns an array of Drupal variables that are set by this module.
 *
 * @return array
 *   The variables that are set by this module.
 */
function commerce_fedex_freight_settings_fields() {
  return array(
    'commerce_fedex_freight_account_number',
    'commerce_fedex_freight_reg_key',
    'commerce_fedex_freight_request_mode',
    'commerce_fedex_freight_account_number_testing',
    'commerce_fedex_freight_reg_key_testing',
    'commerce_fedex_freight_factor',
    'commerce_fedex_freight_shipper_name',
    'commerce_fedex_freight_company_name',
    'commerce_fedex_freight_address_line_1',
    'commerce_fedex_freight_address_line_2',
    'commerce_fedex_freight_city',
    'commerce_fedex_freight_state',
    'commerce_fedex_freight_postal_code',
    'commerce_fedex_freight_country_code',
    'commerce_fedex_freight_services',
    'commerce_fedex_freight_show_logo',
    'commerce_fedex_freight_shipto_residential',
    'commerce_fedex_freight_log'
  );
}

